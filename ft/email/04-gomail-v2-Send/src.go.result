// Issue 266
// Using untrusted input to construct an email is security sensitive.
// Warning will be given.

package main

import (
	"fmt"
	"net/http"
	"os"

	"gopkg.in/gomail.v2"
)

func mailHandler(w http.ResponseWriter, r *http.Request) {
	recvName := r.Form.Get("recv-name")
	m := gomail.NewMessage()
	m.SetHeader("From", "alex@example.com")
	m.SetHeader("To", "bob@example.com")
	m.SetHeader("Subject", "Hello!")

	body := fmt.Sprintf("Welcome %s!", recvName)
	m.SetBody("text/html", body)

	d := gomail.NewDialer("smtp.example.com", 587, "user", os.Getenv("PWD"))

	s, err := d.Dial()
	if err != nil {
		panic(err)
	}
	defer s.Close()

	// OpenRefactory Warning:
	// Possible Email injection!
	// Path:
	//	File: src.go, Line: 16
	//		recvName := r.Form.Get("recv-name")
	//		Variable 'recvName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 18
	//		m.SetHeader("From", "alex@example.com")
	//		Tainted information passed through a function call.
	//	File: src.go, Line: 19
	//		m.SetHeader("To", "bob@example.com")
	//		Tainted information passed through a function call.
	//	File: src.go, Line: 20
	//		m.SetHeader("Subject", "Hello!")
	//		Tainted information passed through a function call.
	//	File: src.go, Line: 22
	//		body := fmt.Sprintf("Welcome %s!", recvName)
	//		Variable 'body' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 23
	//		m.SetBody("text/html", body)
	//		Tainted information passed through a function call.
	//	File: src.go, Line: 33
	//		gomail.Send(s, m)
	//		Tainted information is used in a sink.
	if err := gomail.Send(s, m); err != nil {
		panic(err)
	}
}
