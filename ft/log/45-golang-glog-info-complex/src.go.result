// Issue 89
// Passing tainted data into glog.Info can
// result in log injection.
package testdata

import (
	"net/http"

	"github.com/golang/glog"
)

func getUserName(req *http.Request) string {
	return req.URL.Query().Get("username")
}

func LOG(str string) {
	// OpenRefactory Warning:
	// Possible Log injection!
	// Path:
	//	File: src.go, Line: 13
	//		return req.URL.Query().Get("username")
	//		A tainted value is returned from the function call.
	//	File: src.go, Line: 20
	//		username := getUserName(req)
	//		Variable 'username' is assigned a tainted value.
	//	File: src.go, Line: 21
	//		LOG(username)
	//		Tainted information is passed through the function call via 'username' to the parameter 'str'
	//	File: src.go, Line: 17
	//		glog.Info(str)
	//		Tainted information is used in a sink.
	glog.Info(str)
}
func handler(w http.ResponseWriter, req *http.Request) {
	username := getUserName(req)
	LOG(username)
	w.Write([]byte("Hello, world!"))
}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8090", nil)
}
