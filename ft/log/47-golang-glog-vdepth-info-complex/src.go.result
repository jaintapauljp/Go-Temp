// Issue 89
// Passing tainted data into Verbose.Info can
// result in log injection.
package testdata

import (
	"net/http"

	"github.com/golang/glog"
)

type User struct {
	username string
	password string
}

func handler(w http.ResponseWriter, req *http.Request) {
	username := req.URL.Query().Get("username")
	user := User{
		username: username,
		password: "nil",
	}
	// OpenRefactory Warning:
	// Possible Log injection!
	// Path:
	//	File: src.go, Line: 18
	//		username := req.URL.Query().Get("username")
	//		Variable 'username' is assigned a tainted value.
	//	File: src.go, Line: 19
	//		User{
	//		Field 'username' (from type User) is assigned a tainted value.
	//	File: src.go, Line: 19
	//		user := User{
	//		Variable 'user' is assigned a tainted value.
	//	File: src.go, Line: 23
	//		glog.VDepth(2).Info(user.username)
	//		Tainted information is used in a sink.
	glog.VDepth(2).Info(user.username)
	w.Write([]byte("Hello, world!"))
}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8090", nil)
}
