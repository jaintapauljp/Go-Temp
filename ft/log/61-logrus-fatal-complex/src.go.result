// Issue 89
// Passing tainted data into logrus.Fatal can
// result in log injection.
package testdata

import (
	"net/http"

	"github.com/sirupsen/logrus"
)

type User struct {
	username string
	password string
}

func newUser(name string, pass string) *User {
	return &User{
		username: name,
		password: pass,
	}
}

func Log(user *User) {
	// OpenRefactory Warning:
	// Possible Log injection!
	// Path:
	//	File: src.go, Line: 29
	//		username := req.URL.Query().Get("username")
	//		Variable 'username' is assigned a tainted value.
	//	File: src.go, Line: 31
	//		user := newUser(username, password)
	//		Variable 'user' is assigned a tainted value.
	//	File: src.go, Line: 33
	//		Log(user)
	//		Tainted information is passed through the function call via 'user' to the parameter 'user' through the field 'username' (from type User)
	//	File: src.go, Line: 25
	//		logrus.Fatal((*user).username)
	//		Tainted information is used in a sink.
	logrus.Fatal((*user).username)
}

func handler(w http.ResponseWriter, req *http.Request) {
	username := req.URL.Query().Get("username")
	password := req.URL.Query().Get("password")
	user := newUser(username, password)
	w.Write([]byte("Hello, world!"))
	Log(user)
}

func main() {
	http.HandleFunc("/", handler)
	http.ListenAndServe(":8090", nil)
}
