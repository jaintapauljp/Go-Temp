// Issue 127
// Pass taint through pointer field
// Warning should be generated.

package main

import (
	"net/http"
	"os/exec"
)

type Box struct {
	cmd *exec.Cmd
}

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	cmd := exec.Command(cmdName)
	cmdBox := &Box{cmd: cmd}
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 17
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 18
	//		cmdName := vals.Get("cmd")
	//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 19
	//		cmd := exec.Command(cmdName)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 20
	//		Box{cmd: cmd}
	//		Field 'cmd' (from type Box) is assigned a tainted value.
	//	File: src.go, Line: 20
	//		cmdBox := &Box{cmd: cmd}
	//		Variable 'cmdBox' is assigned a tainted value.
	//	File: src.go, Line: 21
	//		cmdBox.cmd.Run()
	//		Tainted information is used in a sink.
	cmdBox.cmd.Run()
}
