// Issue 127
// Pass taint through pointer
// Warning should be generated.

package main

import (
	"net/http"
	"os/exec"
)

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	cmd := exec.Command(cmdName)
	RunCmd(&cmd)
}

func RunCmd(cp **exec.Cmd) {
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 13
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 14
	//		cmdName := vals.Get("cmd")
	//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 15
	//		cmd := exec.Command(cmdName)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 16
	//		RunCmd(&cmd)
	//		Tainted information is passed through the function call via '&cmd' to the parameter 'cp'
	//	File: src.go, Line: 20
	//		(*cp).Run()
	//		Tainted information is used in a sink.
	(*cp).Run()
}
