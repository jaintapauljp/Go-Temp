// Issue 125
// Passing tainted data as return value to caller function.
// Warning should be generated.

package main

import (
	"net/http"
	"os/exec"
)

func HandleReq(req *http.Request) {
	cmdName := GetCmdName(req)
	cmd := exec.Command(cmdName)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 19
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 20
	//		return vals.Get("cmd")
	//		A tainted value is returned from the function call.
	//	File: src.go, Line: 13
	//		cmdName := GetCmdName(req)
	//		Variable 'cmdName' is assigned a tainted value.
	//	File: src.go, Line: 14
	//		cmd := exec.Command(cmdName)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 15
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}

func GetCmdName(req *http.Request) string {
	vals := req.URL.Query()
	return vals.Get("cmd")
}
