// Issue 125
// Generate pending taint on receiver field, resolve during compose.
// Warning should be generated.

package main

import (
	"net/http"
	"net/url"
	"os/exec"
)

type Box struct {
	cmd *exec.Cmd
}

func (b Box) Run() {
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 27
	//		return req.URL.Query()
	//		A tainted value is returned from the function call.
	//	File: src.go, Line: 31
	//		vals := getUrlValues(req)
	//		Variable 'vals' is assigned a tainted value.
	//	File: src.go, Line: 32
	//		return vals.Get("cmd")
	//		A tainted value is returned from the function call.
	//	File: src.go, Line: 22
	//		cmdName := getCmdName(req)
	//		Variable 'cmdName' is assigned a tainted value.
	//	File: src.go, Line: 23
	//		RunCmd(cmdName)
	//		Tainted information is passed through the function call via 'cmdName' to the parameter 'name'
	//	File: src.go, Line: 37
	//		box.cmd = exec.Command(name)
	//		Variable 'box.cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 38
	//		box.Run()
	//		Tainted information is passed through the function call via 'box' to the receiver 'b' through the field 'cmd' (from type Box)
	//	File: src.go, Line: 18
	//		b.cmd.Run()
	//		Tainted information is used in a sink.
	b.cmd.Run()
}

func HandleReq(req *http.Request) {
	cmdName := getCmdName(req)
	RunCmd(cmdName)
}

func getUrlValues(req *http.Request) url.Values {
	return req.URL.Query()
}

func getCmdName(req *http.Request) string {
	vals := getUrlValues(req)
	return vals.Get("cmd")
}

func RunCmd(name string) {
	box := Box{}
	box.cmd = exec.Command(name)
	box.Run()
}
