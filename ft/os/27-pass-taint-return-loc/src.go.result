// Issue 125
// Passing tainted data through field inside return value to caller.
// Warning should be generated.

package main

import (
	"net/http"
	"net/url"
	"os/exec"
)

type Box struct {
	cmd *exec.Cmd
}

func (b Box) Run() {
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 27
	//		vals := url.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 28
	//		name := vals.Get("cmd")
	//		Variable 'name' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 30
	//		box.cmd = exec.Command(name)
	//		Variable 'box.cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 31
	//		return box
	//		A tainted value is returned from the function call.
	//	File: src.go, Line: 22
	//		b := getCmdInfo(req.URL)
	//		Variable 'b' is assigned a tainted value.
	//	File: src.go, Line: 23
	//		b.Run()
	//		Tainted information is passed through the function call via 'b' to the receiver 'b' through the field 'cmd' (from type Box)
	//	File: src.go, Line: 18
	//		b.cmd.Run()
	//		Tainted information is used in a sink.
	b.cmd.Run()
}

func HandleReq(req *http.Request) {
	b := getCmdInfo(req.URL)
	b.Run()
}

func getCmdInfo(url *url.URL) *Box {
	vals := url.Query()
	name := vals.Get("cmd")
	box := &Box{}
	box.cmd = exec.Command(name)
	return box
}
