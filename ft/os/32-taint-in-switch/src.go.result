// Issue 125
// Test for taint propagation in switch

package main

import (
	"net/http"
	"os/exec"
)

var cmdName string

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName = vals.Get("cmd")
	foo()
}

func foo() {
	bar(cmdName, "pwd", 1)
}

func bar(c1, c2 string, n int) {
	cmdStr := ""
	switch n {
	case 1:
		cmdStr = c1
	case 2:
		cmdStr = c2
	default:
		cmdStr = "exit"
	}
	cmd := exec.Command(cmdStr)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 14
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 15
	//		cmdName = vals.Get("cmd")
	//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 16
	//		foo()
	//		Tainted information is passed through the function call to the global 'cmdName'
	//	File: src.go, Line: 20
	//		bar(cmdName, "pwd", 1)
	//		Tainted information is passed through the function call via 'cmdName' to the parameter 'c1'
	//	File: src.go, Line: 27
	//		cmdStr = c1
	//		Variable 'cmdStr' is assigned a tainted value.
	//	File: src.go, Line: 29
	//		cmdStr = c2
	//		Variable 'cmdStr' is assigned a tainted value.
	//	File: src.go, Line: 31
	//		cmdStr = "exit"
	//		Variable 'cmdStr' is assigned a tainted value.
	//	File: src.go, Line: 33
	//		cmd := exec.Command(cmdStr)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 34
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
