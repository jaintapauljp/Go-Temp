// Issue 125
// Test for taint propagation via pointer

package main

import (
	"net/http"
	"os/exec"
)

type Msg struct {
	txt string
	n   int
}

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	msg := &Msg{txt: cmdName, n: 0}
	foo(msg)
}

func foo(m *Msg) {
	bar(m.txt)
}

func bar(cmdStr string) {
	cmd := exec.Command(cmdStr)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 17
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 18
	//		cmdName := vals.Get("cmd")
	//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 19
	//		Msg{txt: cmdName, n: 0}
	//		Field 'txt' (from type Msg) is assigned a tainted value.
	//	File: src.go, Line: 19
	//		msg := &Msg{txt: cmdName, n: 0}
	//		Variable 'msg' is assigned a tainted value.
	//	File: src.go, Line: 20
	//		foo(msg)
	//		Tainted information is passed through the function call via 'msg' to the parameter 'm' through the field 'txt' (from type Msg)
	//	File: src.go, Line: 24
	//		bar(m.txt)
	//		Tainted information is passed through the function call via 'm.txt' to the parameter 'cmdStr'
	//	File: src.go, Line: 28
	//		cmd := exec.Command(cmdStr)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 29
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
