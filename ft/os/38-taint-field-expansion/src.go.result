// Issue 125
// Test for taint inside field.
// Here, the field needs to be created dinamically
// in the caller (horizon expansion)

package main

import (
	"net/http"
	"os/exec"
)

type Msg struct {
	comm string
	n    int
}

type Conv struct {
	msg     Msg
	isValid bool
}

type Local struct {
	con Conv
	s   string
}

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	m := Msg{cmdName, 0}
	c := Conv{m, true}
	l := Local{c, "check"}
	foo(l)
}

func foo(loc Local) {
	bar(loc)
}

func bar(loc Local) {
	cmd := exec.Command(loc.con.msg.comm)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 29
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 30
	//		cmdName := vals.Get("cmd")
	//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 31
	//		Msg{cmdName, 0}
	//		Field 'comm' (from type Msg) is assigned a tainted value.
	//	File: src.go, Line: 31
	//		m := Msg{cmdName, 0}
	//		Variable 'm' is assigned a tainted value.
	//	File: src.go, Line: 32
	//		Conv{m, true}
	//		Field 'msg' (from type Conv) is assigned a tainted value.
	//	File: src.go, Line: 32
	//		c := Conv{m, true}
	//		Variable 'c' is assigned a tainted value.
	//	File: src.go, Line: 33
	//		Local{c, "check"}
	//		Field 'con' (from type Local) is assigned a tainted value.
	//	File: src.go, Line: 33
	//		l := Local{c, "check"}
	//		Variable 'l' is assigned a tainted value.
	//	File: src.go, Line: 34
	//		foo(l)
	//		Tainted information is passed through the function call via 'l' to the parameter 'loc' through the field 'comm' (from type Msg)
	//	File: src.go, Line: 38
	//		bar(loc)
	//		Tainted information is passed through the function call via 'loc' to the parameter 'loc' through the field 'comm' (from type Msg)
	//	File: src.go, Line: 42
	//		cmd := exec.Command(loc.con.msg.comm)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 43
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
