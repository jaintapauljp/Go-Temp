// Issue 128
// Test for taint propagation via string concat

package main

import (
	"net/http"
	"os/exec"
)

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	arg := vals.Get("cmd")
	cmdName := "rm -f " + arg
	foo(cmdName)
}

func foo(cmd string) {
	bar(cmd)
}

func bar(comm string) {
	cmd := exec.Command(comm)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 12
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 13
	//		arg := vals.Get("cmd")
	//		Variable 'arg' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 14
	//		cmdName := "rm -f " + arg
	//		Variable 'cmdName' is assigned a tainted value.
	//	File: src.go, Line: 15
	//		foo(cmdName)
	//		Tainted information is passed through the function call via 'cmdName' to the parameter 'cmd'
	//	File: src.go, Line: 19
	//		bar(cmd)
	//		Tainted information is passed through the function call via 'cmd' to the parameter 'comm'
	//	File: src.go, Line: 23
	//		cmd := exec.Command(comm)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 24
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
