// Issue 128
// Test for taint propagation via string concat

package main

import (
	"net/http"
	"os/exec"
)

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	foo("rm -f " + vals.Get("cmd"))
}

func foo(cmd string) {
	bar(cmd)
}

func bar(comm string) {
	cmd := exec.Command(comm)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 12
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 13
	//		vals.Get("cmd")
	//		Tainted information passed through a function call.
	//	File: src.go, Line: 13
	//		foo("rm -f " + vals.Get("cmd"))
	//		Tainted information is passed through the function call via '"rm -f " + vals.Get("cmd")' to the parameter 'cmd'
	//	File: src.go, Line: 17
	//		bar(cmd)
	//		Tainted information is passed through the function call via 'cmd' to the parameter 'comm'
	//	File: src.go, Line: 21
	//		cmd := exec.Command(comm)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 22
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
