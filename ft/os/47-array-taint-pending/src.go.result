// Issue 126
// Passing tainted data via array

package main

import (
	"net/http"
	"os/exec"
)

type Box struct {
	data [2]string
}

var gb Box

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	gb.data[0] = cmdName
	foo()
}

func foo() {
	cmd := exec.Command(gb.data[0])
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 18
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 19
	//		cmdName := vals.Get("cmd")
	//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 20
	//		gb.data[0] = cmdName
	//		Variable 'gb.data[0]' is assigned a tainted value.
	//	File: src.go, Line: 21
	//		foo()
	//		Tainted information is passed through the function call to the global 'gb' through the field 'data' (from type Box)
	//	File: src.go, Line: 25
	//		cmd := exec.Command(gb.data[0])
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 26
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
