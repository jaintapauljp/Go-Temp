// Issue 126
// Passing tainted data via array
// element used inside range expression

package main

import (
	"net/http"
	"os/exec"
)

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	ss := [2]string{}
	ss[0] = cmdName
	foo(ss)
}

func foo(cs [2]string) {
	for _, cname := range cs {
		cmd := exec.Command(cname)
		// OpenRefactory Warning:
		// Possible OS command injection!
		// Path:
		//	File: src.go, Line: 13
		//		vals := req.URL.Query()
		//		Variable 'vals' is assigned a tainted value from an external source.
		//	File: src.go, Line: 14
		//		cmdName := vals.Get("cmd")
		//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 16
		//		ss[0] = cmdName
		//		Variable 'ss[0]' is assigned a tainted value.
		//	File: src.go, Line: 17
		//		foo(ss)
		//		Tainted information is passed through the function call via 'ss' to the parameter 'cs'
		//	File: src.go, Line: 21
		//		for _, cname := range cs {
		//		Variable 'cname' is assigned a tainted value.
		//	File: src.go, Line: 22
		//		cmd := exec.Command(cname)
		//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 23
		//		cmd.Run()
		//		Tainted information is used in a sink.
		cmd.Run()
	}
}
