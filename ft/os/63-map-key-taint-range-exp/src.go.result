// Issue 126
// Passing tainted data via map key

package main

import (
	"net/http"
	"os/exec"
)

type Box struct {
	data map[string]string
}

var gb Box

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	gb.data[cmdName] = "name"
	foo()
}

func foo() {
	for key := range gb.data {
		cmd := exec.Command(key)
		// OpenRefactory Warning:
		// Possible OS command injection!
		// Path:
		//	File: src.go, Line: 18
		//		vals := req.URL.Query()
		//		Variable 'vals' is assigned a tainted value from an external source.
		//	File: src.go, Line: 19
		//		cmdName := vals.Get("cmd")
		//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 20
		//		gb.data[cmdName]
		//		Map key 'cmdName' is assigned a tainted value.
		//	File: src.go, Line: 21
		//		foo()
		//		Tainted information is passed through the function call to the global 'gb' through the 'key' of the map
		//	File: src.go, Line: 25
		//		for key := range gb.data {
		//		Variable 'key' is assigned a tainted value.
		//	File: src.go, Line: 26
		//		cmd := exec.Command(key)
		//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 27
		//		cmd.Run()
		//		Tainted information is used in a sink.
		cmd.Run()
	}
}
