// Issue 126
// Passing tainted data via field of map key

package main

import (
	"net/http"
	"net/url"
	"os/exec"
)

type Box struct {
	data string
}

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	foo(bar(vals))
}

func bar(v url.Values) string {
	return v.Get("cmd")
}

func get(cn string) map[Box]string {
	return map[Box]string{{cn}: "cmd"}
}

func foo(name string) {
	pm := get(name)
	for bx := range pm {
		cmd := exec.Command(bx.data)
		// OpenRefactory Warning:
		// Possible OS command injection!
		// Path:
		//	File: src.go, Line: 17
		//		vals := req.URL.Query()
		//		Variable 'vals' is assigned a tainted value from an external source.
		//	File: src.go, Line: 22
		//		return v.Get("cmd")
		//		A tainted value is returned from the function call.
		//	File: src.go, Line: 18
		//		foo(bar(vals))
		//		Tainted information is passed through the function call via 'bar(vals)' to the parameter 'name'
		//	File: src.go, Line: 26
		//		{cn}
		//		Field 'data' (from type Box) is assigned a tainted value.
		//	File: src.go, Line: 26
		//		return map[Box]string{{cn}: "cmd"}
		//		A tainted value is returned from the function call.
		//	File: src.go, Line: 30
		//		pm := get(name)
		//		Variable 'pm' is assigned a tainted value.
		//	File: src.go, Line: 31
		//		for bx := range pm {
		//		Variable 'bx' is assigned a tainted value.
		//	File: src.go, Line: 32
		//		cmd := exec.Command(bx.data)
		//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 33
		//		cmd.Run()
		//		Tainted information is used in a sink.
		cmd.Run()
	}
}
