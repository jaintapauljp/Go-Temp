// Issue 126
// Test for passing taint through the field of map
// key locations from param to caller method.

package main

import (
	"net/http"
	"os/exec"
)

type Box struct {
	data string
}

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := vals.Get("cmd")
	bm := make(map[Box]string)
	bar(cmdName, bm)
	foo(bm)
}

func bar(name string, mp map[Box]string) {
	bx := Box{name}
	mp[bx] = "cmd"
}

func foo(pm map[Box]string) {
	for bx := range pm {
		cmd := exec.Command(bx.data)
		// OpenRefactory Warning:
		// Possible OS command injection!
		// Path:
		//	File: src.go, Line: 17
		//		vals := req.URL.Query()
		//		Variable 'vals' is assigned a tainted value from an external source.
		//	File: src.go, Line: 18
		//		cmdName := vals.Get("cmd")
		//		Variable 'cmdName' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 25
		//		Box{name}
		//		Field 'data' (from type Box) is assigned a tainted value.
		//	File: src.go, Line: 25
		//		bx := Box{name}
		//		Variable 'bx' is assigned a tainted value.
		//	File: src.go, Line: 26
		//		mp[bx]
		//		Map key 'bx' is assigned a tainted value.
		//	File: src.go, Line: 21
		//		foo(bm)
		//		Tainted information is passed through the function call via 'bm' to the parameter 'pm' through the field 'data' (from type Box)
		//	File: src.go, Line: 31
		//		cmd := exec.Command(bx.data)
		//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
		//	File: src.go, Line: 32
		//		cmd.Run()
		//		Tainted information is used in a sink.
		cmd.Run()
	}
}
