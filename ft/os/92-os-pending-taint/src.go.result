// Issue 142
// Generate pending taint on param,
// resolve during compose of variadic function.
// Warning should be generated.

package main

import (
	"net/http"
	"net/url"
	"os/exec"
)

func HandleReq(req *http.Request) {
	vals := req.URL.Query()
	cmdName := getCmdName(vals, "x", "y", "z")
	RunCmd(cmdName, true)
}

func getCmdName(v url.Values, a ...string) string {
	return v.Get("cmd")
}

func RunCmd(name string, b ...bool) {
	cmd := exec.Command(name)
	// OpenRefactory Warning:
	// Possible OS command injection!
	// Path:
	//	File: src.go, Line: 15
	//		vals := req.URL.Query()
	//		Variable 'vals' is assigned a tainted value from an external source.
	//	File: src.go, Line: 21
	//		return v.Get("cmd")
	//		A tainted value is returned from the function call.
	//	File: src.go, Line: 16
	//		cmdName := getCmdName(vals, "x", "y", "z")
	//		Variable 'cmdName' is assigned a tainted value.
	//	File: src.go, Line: 17
	//		RunCmd(cmdName, true)
	//		Tainted information is passed through the function call via 'cmdName' to the parameter 'name'
	//	File: src.go, Line: 25
	//		cmd := exec.Command(name)
	//		Variable 'cmd' is assigned a tainted value which is passed through a function call.
	//	File: src.go, Line: 26
	//		cmd.Run()
	//		Tainted information is used in a sink.
	cmd.Run()
}
